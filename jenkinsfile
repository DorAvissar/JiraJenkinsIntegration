pipeline {
    agent any

    environment {
        JIRA_SITE = 'http://localhost:9090/'
        JIRA_CREDS = credentials('jira_cred')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/DorAvissar/MethodaProject.git/'
            }
        }

        stage('Extract Jira Issue Key') {
            when {
                changeset pattern: "refs/heads/(?:.*?/)?+([A-Z]+-\\d+)(?:\\/.*)?", comparator: "REGEXP"
            }
            steps {
                script {
                    def matcher = currentBuild.changeSets[0]?.items?.find { item -> item.msg =~ /Merge/ }?.msg
                    def issueKey = (matcher =~ /refs\/heads\/(?:.*?\/)?+([A-Z]+-\d+)/)[0][1]
                    if (issueKey) {
                        env.JIRA_ISSUE_KEY = issueKey
                        echo "Extracted Jira issue key: $issueKey"
                    } else {
                        error("No Jira issue key found in branch name")
                    }
                }
            }
        }

        stage('Move Jira Issue to Done') {
            when {
                expression { env.JIRA_ISSUE_KEY != null }
            }
            steps {
                script {
                    def statusResponse = httpRequest consoleLogResponseBody: true, contentType: 'APPLICATION_JSON', httpMode: 'PUT',
                        requestBody: '{"fields":{"status":{"name":"Done"}}}',
                        url: "${JIRA_SITE}/rest/api/2/issue/${env.JIRA_ISSUE_KEY}",
                        validResponseCodes: '200',
                        authentication: JIRA_CREDS
                    if (statusResponse.status != 200) {
                        error "Failed to update Jira issue status. HTTP code: ${statusResponse.status}"
                    }
                }
            }
        }
    }
}